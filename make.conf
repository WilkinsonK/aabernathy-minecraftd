# Values included in this file are used intended
# to modify the behavior of `make`.

# Configure the shell used for this makefile.
SHELL := bash

# Use one shell for whole process instead of a
# new shell for every new line/instruction.
.ONESHELL:

# Configures the shell such that it will do the
# following:
# -e: fail and exit when sub-command fails
# -u: fail when undefined variable names are
# used.
# -o pipefail: prevents errors in a pipeline from
# being masked. If any command in a pipeline
# fails, the return-code of the pipeline is the
# failing return-code.
.SHELLFLAGS := -eu -o pipefail -c

# Deletes the target file if its rule fails. Will
# ensure it'll properly re-run the failed rule.
.DELETE_ON_ERROR:

# Alerts the user if some variable name has not
# been defined.
MAKEFLAGS += --warn-undefined-variables

# No black magic.
MAKEFLAGS += --no-builtin-rules

# Sets the .RECIPEPREFIX to a custom string.
# .RECIPEPREFIX explains newline behavior for
# instructions belonging to a rule.
ifeq ($(origin .RECIPEPREFIX), undefined)
  $(error This Make does not support .RECIPEPREFIX. Please Use GNU Make 4.0 or later)
endif
.RECIPEPREFIX = >

# --------------------------------------------- #
# Compiler configuration.
# --------------------------------------------- #
CC := gcc
CDEBUG := 1
CWFMT_LEVEL := 2
CVERSION := c17

# Linker flags.
LDFLAGS ?= -std=$(CVERSION) # -z -m


# --------------------------------------------- #
# Compiler flags. Do not modify from here. This
# value is modified from this point in the config
# onward.
# --------------------------------------------- #
CFLAGS ?=

# ********************************************* #
# Compiler Warnings enabled.
# Uncomment any of the below if desired to use
# in your build.
CFLAGS +=                 \
  -Wall                   \
  -Wextra                 \
  # -Wpedantic              \
  # -Wformat=$(CWFMT_LEVEL) \
  # -Wno-unused-parameter   \
  # -Wshadow                \
  # -Wwrite-strings         \
  # -Wstrict-prototypes     \
  # -Wold-style-cast        \
  # -Wredundant-decls       \
  # -Wnested-externs        \
  # -Wmissing-include-dirs  \
# ********************************************* #

# Warning flags only supported by GCC.
ifeq ($(CC), gcc)
  CFLAGS += -Wimplicit-int -Wlong-long
endif

# ********************************************* #
# Additional compiler flags
CFLAGS += -g -std=$(CVERSION) -MMD
# ********************************************* #


# --------------------------------------------- #
# Target directories and files. The below options
# dictate where source files can be found, where
# external libraries are built and where this
# project is built to.
# --------------------------------------------- #

# ********************************************* #
# Target install directory. This will point to
# the parent dirctory where binaries and config
# files are to be placed.
PROJECT_ROOT := $(shell pwd)
# ********************************************* #

# ********************************************* #
# Root directory of important files.
BLD_ROOT := $(PROJECT_ROOT)/build/
SRC_ROOT := $(PROJECT_ROOT)/project/src/
INC_ROOT := $(PROJECT_ROOT)/project/include/
# ********************************************* #

# ********************************************* #
# Allow for external libraries in this target
# directory.
CFLAGS += -I$(INC_ROOT)
# ********************************************* #


# --------------------------------------------- #
# Directory name used for building external
# libraries.
# --------------------------------------------- #
INC_DISTNAME := dist/


# --------------------------------------------- #
# Installation value configuration. These values
# dictate the behavior for where this project
# would be installed on the target system.
# --------------------------------------------- #
INST_PREFIX ?= $(BLD_ROOT)
INST_DESTDIR ?= bin/
INST_ROOT := $(INST_PREFIX)$(INST_DESTDIR)
